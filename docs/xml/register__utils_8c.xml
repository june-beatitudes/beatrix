<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="register__utils_8c" kind="file" language="C++">
    <compoundname>register_utils.c</compoundname>
    <includes refid="register__utils_8h" local="no">register_utils.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="2">
        <label>register_utils.h</label>
        <link refid="register__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kernel/src/register_utils.c</label>
        <link refid="register__utils_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="register__utils_8c_1aea7ccb1f68c35c1ace876675a6c406d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((always_inline))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kernel/src/register_utils.c" line="5" column="1" bodyfile="kernel/src/register_utils.c" bodystart="5" bodyend="21"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="register__utils_8h" kindref="compound">register_utils.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="register__utils_8c_1aea7ccb1f68c35c1ace876675a6c406d7" refkind="member"><highlight class="normal"><ref refid="register__utils_8c_1aea7ccb1f68c35c1ace876675a6c406d7" kindref="member">__attribute__</ref><sp/>((always_inline))<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="register__utils_8h_1a3c04f34a58adc5c29dd8f4160adb9a7f" kindref="member">bea_set_reg_bits</ref><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*base_addr,<sp/>uint8_t<sp/>msb,<sp/>uint8_t<sp/>lsb,</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msb<sp/>&gt;<sp/>31<sp/>||<sp/>msb<sp/>&lt;<sp/>lsb)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msb<sp/>==<sp/>31<sp/>&amp;&amp;<sp/>lsb<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*base_addr<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>((1<sp/>&lt;&lt;<sp/>(msb<sp/>-<sp/>lsb<sp/>+<sp/>1))<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>lsb;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>*base_addr<sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>*base_addr<sp/>|=<sp/>(value<sp/>&lt;&lt;<sp/>lsb)<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="register__utils_8c_1aea7ccb1f68c35c1ace876675a6c406d7" kindref="member">__attribute__</ref><sp/>((always_inline))<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="register__utils_8h_1a44dad41f9a6b361221dfd97e36343764" kindref="member">bea_get_reg_bits</ref><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*base_addr,<sp/>uint8_t<sp/>msb,<sp/>uint8_t<sp/>lsb)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msb<sp/>&gt;<sp/>31<sp/>||<sp/>msb<sp/>&lt;<sp/>lsb)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>get<sp/>what<sp/>you<sp/>pay<sp/>for,<sp/>which<sp/>is<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0U;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msb<sp/>==<sp/>31<sp/>&amp;&amp;<sp/>lsb<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*base_addr;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>((1<sp/>&lt;&lt;<sp/>(msb<sp/>-<sp/>lsb<sp/>+<sp/>1))<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>lsb;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*base_addr<sp/>&amp;<sp/>mask)<sp/>&gt;&gt;<sp/>lsb;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="kernel/src/register_utils.c"/>
  </compounddef>
</doxygen>
